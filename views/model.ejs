<div style="width: 100%;height: 100%; display: flex;align-items: start;justify-content: start;">
	<div style="width: 45%;height: 100%;padding: 20px;overflow-y: scroll;border-right: 1px solid rgba(0, 0, 0, 0.25);">
		<div>
			<h3><%= modelData?.modelName %></h3>
			<p>Edit model this model accross the website.</p>
		</div>
		
		<div style="display: flex; align-items: center; justify-content: space-between; width: 100%;border-bottom: 1px solid rgba(0, 0, 0, 0.25);margin-bottom: 10px;">
			<p style="margin: 0;font-size: 13px; font-weight: 600;">FIELDS:</p>
		</div>
		<div id="inputs-container" style="width: 100%;">
			<input type="hidden" name="modelName" value="<%= modelData?.modelName %>">
			<input type="hidden" name="modelId" id="modelId" value="<%= modelData?._id %>">
			<% if(modelData?.dataObject && Object.keys(modelData?.dataObject)?.length > 0) { Object.keys(modelData?.dataObject).forEach(item => { 
				if(item == "repeaters"){ modelData?.dataObject[item]?.forEach( repeaterItem => {
				%>
					<div style="display: flex;align-items: center;justify-content: space-between;background-color: #fff;color: #2a5298;padding: 10px;border-radius: 6px;border: 1px solid rgba(0, 0, 0, 0.25);font-size: 13px;margin-bottom: 15px;">
						<div style="display: flex; align-items: center;gap: 15px;">
							<p style="margin: 0; font-weight: 600;">
								REPEATER
							</p>
							<p style="margin: 0;">
								<%= repeaterItem?.repeaterName %>
							</p>
						</div>
						<p style="margin: 0;">
							<i onclick="editRepeaterData('<%= JSON.stringify(repeaterItem) %>')" class="fa-solid fa-pen" style="cursor: pointer;margin-right: 5px;"></i>
							<i onclick="removeRepeaterFromModel('<%= modelData?._id %>','<%= repeaterItem?.repeaterName %>', '<%= repeaterItem?.id %>')" style="cursor: pointer;" class="fa-solid fa-trash-can"></i>
						</p>
					</div>
				<% })} else { %>
				<div class="input-group mb-3">
					<span style="color:#484848;background-color: #f5f5f5;font-weight: 500;border-radius: 0px;font-size: 13px;border:1px solid rgba(0, 0, 0, 0.25)" class="button-secondary">Key Name</span>
					<input type="text" class="form-control" placeholder="Enter a key" name="<%= item %>" value="<%= item %>" aria-label="Enter a key" required style="font-size: 13px;">
					<span style="color:#484848;background-color: #f5f5f5;font-weight: 500;border-radius: 0px;font-size: 13px;border:1px solid rgba(0, 0, 0, 0.25)" class="button-secondary">Data Type</span>
					<select class="form-select" aria-label="Default select example" name="<%= item %>" style="font-size: 13px;">
						<option <%= modelData?.dataObject[item] == "String" && "selected" %> value="String">String</option>
						<option <%= modelData?.dataObject[item] == "Boolean" && "selected" %> value="Boolean">Boolean</option>
						<option <%= modelData?.dataObject[item] == "Number" && "selected" %> value="Number">Number</option>
						<option <%= modelData?.dataObject[item] == "Image" && "selected" %> value="Image">Image</option>
						<option <%= modelData?.dataObject[item] == "Mixed" && "selected" %> value="Mixed">Editor</option>
						<option <%= modelData?.dataObject[item] == "Array" && "selected" %> value="Array">Array</option>
					</select>
					<span onclick="deleteModelField('<%= item %>','<%= modelData?._id %>')" style="cursor: pointer;;color:#484848;background-color: #f5f5f5;font-weight: 500;border-radius: 0px;font-size: 13px;border:1px solid rgba(0, 0, 0, 0.25)" class="button-secondary delete-btn"><i class="fa-solid fa-trash-can" style="font-size: 13px;"></i></span>
				</div>
			<% } }); } else { %>
				<div id="empty-model-wr" style="display: flex;align-items: center;justify-content: center;gap: 20px;">
					<figure style="width: 100px;margin: 0;">
						<img src="/images/empty-box-svgrepo-com.svg" width="100" alt="No content">
					</figure>
					<p style="margin: 0;font-size: 14px;font-weight: 600;color: #484848;">Start defining your model, by adding fields</p>
				</div>
			<% } %>
		</div>
	</div>
	<div style="width: 55%;padding: 20px; display: flex;flex-direction: column;gap: 15px;height: 100%;overflow-y: scroll;">
		<div style="background-color: #fff;border-radius: 8px; padding: 10px; width: 100%;border: 1px solid rgba(0,0,0,0.25);display: flex;flex-direction: column;gap: 5px;">
			<h5 style="font-weight: 600; font-size: 13px; text-transform: uppercase;margin-bottom: 15px; border-bottom: 1px solid rgba(0,0,0,0.25);padding-bottom: 5px;">Publish</h5>
			<button class="button-main button-main-md" onclick="handlesubmit()">Update Model</button>
		</div>
		<div style="background-color: #fff;border-radius: 8px; padding: 10px; width: 100%;border: 1px solid rgba(0,0,0,0.25);display: flex;flex-direction: column;gap: 5px;">
			<h5 style="font-weight: 600; font-size: 13px; text-transform: uppercase;margin-bottom: 15px; border-bottom: 1px solid rgba(0,0,0,0.25);padding-bottom: 5px;">Model Description</h5>
			<div style="display: flex;align-items: center;gap: 10px;">
				<form action="/api/v1/manage/add-model-description" method="post" style="width: 100%;">
					<input type="hidden" name="modelId" id="modelId" value="<%= modelData?._id %>">
					<textarea class="form-control" name="description" style="width: 100%;height: 25px;border:1px solid rgba(0, 0, 0, 0.25);font-size: 13px;"><%= modelData?.description %></textarea>
					<button class="button-secondary" style="margin-top: 10px;">Update</button>
				</form>
			</div>
		</div>
		<div style="background-color: #fff;border-radius: 8px; padding: 10px; width: 100%;border: 1px solid rgba(0,0,0,0.25);display: flex;flex-direction: column;gap: 5px;">
			<h5 style="font-weight: 600; font-size: 13px; text-transform: uppercase;margin-bottom: 15px; border-bottom: 1px solid rgba(0,0,0,0.25);padding-bottom: 5px;">Edit Fields</h5>
			<div style="display: flex;align-items: center;gap: 10px;">
				<button class="button-secondary" type="button" onclick="addfield();">Add new field</button>
				<button class="button-secondary-blue" type="button" onclick="addRepeater();"><i class="fa-solid fa-plus"></i> Repeater</button>
			</div>
		</div>
		<div id="repeater-parent" style="background-color: #fff;border-radius: 8px; padding: 10px; width: 100%;border: 1px solid rgba(0,0,0,0.25);display: none;flex-direction: column;gap: 5px;">
			<h5 style="font-weight: 600; font-size: 13px; text-transform: uppercase;margin-bottom: 15px; border-bottom: 1px solid rgba(0,0,0,0.25);padding-bottom: 5px;">Repeater</h5>
			<div class="repeater-warning-container">

			</div>
			<input type="hidden" name="existingRepeater" id="existingRepeater">
			<label for="repeaterName" style="text-transform: capitalize;font-weight: 500;">Repeater Name</label>
			<input type="text" class="form-control" id="repeaterName" name="repeaterName" style="width: 50%;" >
			<label for="repeaterLabel" style="text-transform: capitalize;font-weight: 500;margin-top: 25px;">Repeater Label</label>
			<input type="text" class="form-control" id="repeaterLabel" name="repeaterLabel" style="width: 50%;" >
			<p style="margin: 15px 0px; font-size: 13px;font-weight: 600;">Sub Fields:</p>
			<div style="border: 1px solid rgba(0, 0, 0, 0.25);border-radius: 6px;">
				<div style="display: flex;align-items: center;justify-content: space-between;padding: 10px;">
					<p style="margin: 0;font-size: 14px;font-weight: 400;"><img src="/static/puzzle-svgrepo-com.svg" width="20" style="transform: rotate(-45deg);margin-right: 10px;" alt="fields ">Fields</p>
					<button onclick="handleAddRepeaterSubField()" class="button-secondary"><i class="fa-solid fa-plus" style="margin-right: 10px;"></i>Add Field</button>
				</div>
				<div style="padding: 10px;border-top: 1px solid rgba(0, 0, 0, 0.25);background-color: #f5f5f5;">
					<table style="width: 100%;" id="repeater-table">
						<thead>
							<th style="font-size: 13px; font-weight: 500;">#</th>
							<th style="font-size: 13px; font-weight: 500;">Label</th>
							<th style="font-size: 13px; font-weight: 500;">Name</th>
							<th style="font-size: 13px; font-weight: 500;">Key</th>
							<th style="font-size: 13px; font-weight: 500;">Type</th>
						</thead>
						<!-- REPEATER TABLE FIELDS WILL COME HERE -->
					</table>
				</div>
			</div>
			<div style="text-align: right;padding: 10px;">
				<button class="button-secondary" onclick="resetRepeater()" >Close</button>
				<button onclick="saveRepeaterData()" class="button-secondary" style="border: 1px solid #39a8d8;color: #39a8d8;background-color: #39a8d8;color: #fff;font-weight: 500;letter-spacing: 0.25px;">Save Fields</button>
			</div>
		</div>
		<div style="display: flex; flex-direction: column; align-items: start; justify-content: start; width: 100%;padding: 10px;margin-bottom: 10px;background-color: #fff;border: 1px solid rgba(0, 0, 0, 0.25);border-radius: 6px;">
			<h5 style="width: 100%;font-weight: 600; font-size: 13px; text-transform: uppercase;margin-bottom: 15px; border-bottom: 1px solid rgba(0,0,0,0.25);padding-bottom: 5px;">Link Post-types</h5>
			<p style="font-size: 13px;margin-bottom: 5px;">Link this custom field to a post type</p>
			<select name="postTypeSelector" id="post-type-selector" onchange="handlePostTypeConfirmation()" style="width: 100%;padding: 5px 10px; background-color: aliceblue;margin-bottom: 5px;font-size: 12px;" >
				<option value="">Choose a post type</option>
				<% allPostTypes.forEach( item => { %>
				<option value="<%= item._id %>--<%= item.postTypeName %>"><%= item.postTypeName %></option>
				<% }) %>
			</select>
			<div id="post-type-link-confirmation" style="margin-top: 5px;display: none;align-items: center;justify-content: space-between;gap: 10px;background-color: aliceblue;border-bottom: 1px solid rgba(0, 0, 0, 0.25);width: 100%;padding: 4px;">
				<p id="post-type-confirm-name" style="margin: 0;font-weight: 600;font-size: 13px;"></p>
				<form action="/api/v1/manage/link-post-type-to-model" method="POST">
					<input type="hidden" name="linkPostTypeName" id="linkPostTypeName">
					<input type="hidden" name="linkPostTypeId" id="linkPostTypeId">
					<input type="hidden" name="linkModelId" id="linkModelId" value="<%= modelData?._id %>">
					<button type="submit" style="font-size: 13px; background-color: #484848;color: #fff;font-weight: 600;border-radius: 5px;">Link Post-Type</button>
				</form>
			</div>
			<p style="font-size: 13px;margin-bottom: 10px;margin-top: 15px;">Currently linked post-types:</p>
			<table width="100%" cellspacing="0" cellpadding="0" style="font-size: 12px;">
				<tr style="border-bottom: 1px solid rgba(0, 0, 0, 0.25);">
					<td style="text-transform: uppercase;font-weight: 600;">Post-Type</td>
					<td style="text-transform: uppercase;font-weight: 600;">Slug</td>
					<td style="text-transform: uppercase;font-weight: 600;">Post Count</td>
					<td style="text-transform: uppercase;font-weight: 600;">Actions</td>
				</tr>
				<% if(linkedPostTypes?.length > 0) { linkedPostTypes.forEach(item => { %>
				<tr style="background-color: #f1f1f1;border-bottom: 1px solid rgba(0, 0, 0, 0.25);">
					<td style="padding-top: 5px;padding: 5px;">
						<%= item.postTypeName %>
					</td>
					<td style="padding-top: 5px;">
						<%= item.postTypeSlug %>
					</td>
					<td style="padding-top: 5px;">
						<%= item.postCount %>
					</td>
					<td style="padding-top: 5px;">
						<div style="display: flex;align-items: center;gap: 10px;">
							<% if (item.postCount === 0) { %>
								<i onclick="unlinkPostType('<%= item.postTypeName %>','<%= item._id %>')" style="cursor: pointer;" class="fa-solid fa-link-slash"></i>
							<% } else { %>
								<i onclick="showAlert('')" style="cursor: pointer;" class="fa-solid fa-link-slash"></i>
							<% } %><i style="cursor: pointer;" class="fa-solid fa-eye"></i>
						</div>
					</td>
				</tr>
				<% })} else { %>
					<td colspan="4">
						<div style="width: 100%; text-align: center;padding: 5px 0px;">
							No Post-Types are linked to this model yet.
						</div>
					</td>
				<% } %>
			</table>
		</div>
		<div id="repeater-customize" style="background-color: #fff;border-radius: 8px; padding: 10px; width: 100%;border: 1px solid rgba(0,0,0,0.25);display: none;flex-direction: column;gap: 5px;">
			<h5 style="font-weight: 600; font-size: 13px; text-transform: uppercase;margin-bottom: 15px; border-bottom: 1px solid rgba(0,0,0,0.25);padding-bottom: 5px;">Customize Repeater</h5>
			<button class="button-secondary" type="button">Add new field</button>
		</div>
	</div>
	<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
	<script>

		// Functions and logic for repeaters:
		
		/**
		 * FUNCTION CALLED WHEN REPEATER BUTTON CLICKED:
		 *
		 * THIS FUCNCTION WILL OPEN A FORM LIKE STRUCTRE WHERE USERS CAN CUSTOMIZE THEIR REPEATER
		 * */

		function addRepeater() {
			document.querySelector("#repeater-parent").style.display = "flex";
		}

		function resetRepeater() {
			const parent = document.querySelector("#repeater-parent");
			parent.style.display = "none";
			const warningContainer = parent.querySelector(".repeater-warning-container");
			warningContainer.innerHTML ="";
			document.querySelector("#repeaterName").value = "";
			document.querySelector("#repeaterLabel").value = "";
			const table = document.querySelector("#repeater-table");
			const allRows = table.querySelectorAll('tr:not(thead tr)');
			allRows.forEach(row => {
				row.remove();
			})
		}
		
		function editRepeaterData(repeaterItem) {
			resetRepeater();
			const repeaterItemObj = JSON.parse(repeaterItem);
			const parent = document.querySelector("#repeater-parent");
			parent.style.display = "flex";
			const warningContainer = parent.querySelector(".repeater-warning-container");
			const htmlText = `
				<div style="border:1px solid rgba(0,0,0,0.25);border-radius:6px;display:flex;align-items:center;gap:10px;background-color:#4CB9E71a;padding:10px 15px">
					<figure style="margin:0px">
						<img src="/static/icons8-website-error-30.png" alt="">
					</figure>
					<p style="font-size:12px;font-weight:500;margin:0px;color:#484848">
						Note that editing repeater fields, or adding or removing fields will not affect the data that has been previously stored for the repeater. Please make updates to data seperately.
					</p>
				</div>
			`
			warningContainer.innerHTML = htmlText;
			document.querySelector("#repeaterName").value = repeaterItemObj?.repeaterName;
			document.querySelector("#repeaterLabel").value = repeaterItemObj?.repeaterLabel;
			document.querySelector("#existingRepeater").value = repeaterItemObj?.id;
			const table = document.getElementById("repeater-table");
			const rows = table.rows.length;
			repeaterItemObj.fields?.forEach((field, index) => {
				const htmlText = `
					<td><p style="margin:0;font-size:12px;font-weight:500;color:#484848;padding:10px">${index+1}</p></td>
					<td style="padding:10px 0px">
						<input style="width:80%" type="text" class="form-control" value="${field?.fieldLabel}" name="repeaterItemFieldLabel" />
					</td>
					<td>
						<input style="width:80%" type="text" class="form-control" value="${field?.fieldName}"  name="repeaterItemFieldName" />
					</td>
					<td>
						<p style="margin:0;font-size:12px;font-weight:600;color:#484848;">${field?.id}</p>
					</td>
					<td>
						<div class="dropdown">
							<button class="button-secondary dropdown-toggle" style="display:flex;align-items:center;border:none;color:#6096B4" type="button" data-bs-toggle="dropdown" aria-expanded="false">
								<div style="cursor:pointer;margin:0;font-size:11px;font-weight:500;color:#484848;padding:5px 10px;display:flex;align-items:center;">
									<img src="${field?.fieldType === "Editor" ? "/static/icons8-pencil-30.png": field?.fieldType === "Text" ? "/static/icons8-text-30.png" : field?.fieldType === "Image" ? "/static/icons8-image-30.png" : "/static/icons8-url-30.png" }" alt="" style="margin-right:20px" >
									<p style="margin:0px;font-size:12px;">${field?.fieldType}</p>	
								</div>
							</button>
							<input type="hidden" name="fieldType" value="${field?.fieldType}">
							<ul class="dropdown-menu">
								<li onclick="setFieldType(this, 'Text')" style="cursor:pointer;margin:0;font-size:11px;font-weight:500;color:#484848;padding:5px 10px;display:flex;align-items:center;">
									<img src="/static/icons8-text-30.png" alt="" style="margin-right:20px" >
									<p style="margin:0px;font-size:12px;">Text</p>	
								</li>
								<li onclick="setFieldType(this, 'Editor')" style="cursor:pointer;margin:0;font-size:11px;font-weight:500;color:#484848;padding:5px 10px;display:flex;align-items:center;">
									<img src="/static/icons8-pencil-30.png" alt="" style="margin-right:20px" >
									<p style="margin:0px;font-size:12px;">Editor</p>	
								</li>
								<li onclick="setFieldType(this, 'URL')" style="cursor:pointer;margin:0;font-size:11px;font-weight:500;color:#484848;padding:5px 10px;display:flex;align-items:center;">
									<img src="/static/icons8-url-30.png" alt="" style="margin-right:20px" >
									<p style="margin:0px;font-size:12px;">URL</p>	
								</li>
								<li onclick="setFieldType(this, 'Image')" style="cursor:pointer;margin:0;font-size:11px;font-weight:500;color:#484848;padding:5px 10px;display:flex;align-items:center;">
									<img src="/static/icons8-image-30.png" alt="" style="margin-right:20px" >
									<p style="margin:0px;font-size:12px;">Image</p>	
								</li>
							</ul>
						</div>
					</td>
				`;
				const newRow = document.createElement("tr");
				newRow.innerHTML = htmlText;
				newRow.style.borderTop = '1px solid rgba(0,0,0,0.20)'
				table.appendChild(newRow);
			})
			
		}

		function deleteModelField(fieldName, modelId) {
			fetch("/api/v1/manage/delete-model-field", {
				method:"POST",
				headers:{
					"Content-Type":"application/json"
				},
				body:JSON.stringify({fieldName, modelId})
			})
			.then(res => res.json())
			.then(data => window.location.reload());
		}

		function removeRepeaterFromModel(modelId, repeaterName, repeaterId) {
			fetch("/api/v1/manage/delete-repeater", {
				method:"POST",
				headers:{
					"Content-Type":"application/json"
				},
				body:JSON.stringify({modelId, repeaterName, repeaterId})
			})
			.then(res => res.json())
			.then(data => {console.log(data); window.location.reload()})
		}

		function saveRepeaterData() {
			const data = {fields:[]};
			const repeaterName = document.querySelector("#repeaterName").value;
			const existingRepeater = document.querySelector("#existingRepeater").value;
			const repeaterLabel = document.querySelector("#repeaterLabel").value;
			const modelId = document.querySelector("#modelId").value;
			data.modelId = modelId;
			data.repeaterLabel = repeaterLabel;
			data.repeaterName = repeaterName;
			data.existingRepeater = existingRepeater;
			const table = document.querySelector("#repeater-table");
			const allRows = table.querySelectorAll('tr:not(thead tr)');
			allRows.forEach(row => {
				const fieldLabel = row.querySelector("td:nth-child(2) input[name='repeaterItemFieldLabel']").value;
				const fieldName = row.querySelector('td:nth-child(3) input[name="repeaterItemFieldName"]').value;
				const id = row.querySelector("td:nth-child(4) p").textContent;
				const fieldType = row.querySelector("td:nth-child(5) .dropdown input").value;
				data.fields.push({
					id,
					fieldName,
					fieldLabel,
					fieldType
				})
			});
			fetch("/api/v1/manage/add-repeater-to-model", {
				method:"POST",
				headers:{
					"Content-Type":"application/json"
				},
				body:JSON.stringify(data)
			})
			.then(res => res.json())
			.then(data => {console.log(data); resetRepeater();})
		}

		function generateUUID() {
			return 'xxxx-fieldset-4xxx-yxxx-xxxx'.replace(/[xy]/g, function(c) {
				var r = Math.random() * 16 | 0,
					v = c === 'x' ? r : (r & 0x3 | 0x8);
				return v.toString(16);
			});
		}

		function handleAddRepeaterSubField() {
			const table = document.getElementById("repeater-table");
			const rows = table.rows.length;
			const newUUID = generateUUID();
			const htmlText = `
					<td><p style="margin:0;font-size:12px;font-weight:500;color:#484848;padding:10px">${rows}</p></td>
					<td style="padding:10px 0px">
						<input style="width:80%" type="text" class="form-control" name="repeaterItemFieldLabel" />
					</td>
					<td>
						<input style="width:80%" type="text" class="form-control" name="repeaterItemFieldName" />
					</td>
					<td>
						<p style="margin:0;font-size:12px;font-weight:600;color:#484848;">${newUUID}</p>
					</td>
					<td>
						<div class="dropdown">
							<button class="button-secondary dropdown-toggle" style="display:flex;align-items:center;border:none;color:#6096B4" type="button" data-bs-toggle="dropdown" aria-expanded="false">
								Field Type
							</button>
							<input type="hidden" name="fieldType">
							<ul class="dropdown-menu">
								<li onclick="setFieldType(this, 'Text')" style="cursor:pointer;margin:0;font-size:11px;font-weight:500;color:#484848;padding:5px 10px;display:flex;align-items:center;">
									<img src="/static/icons8-text-30.png" alt="" style="margin-right:20px" >
									<p style="margin:0px;font-size:12px;">Text</p>	
								</li>
								<li onclick="setFieldType(this, 'Editor')" style="cursor:pointer;margin:0;font-size:11px;font-weight:500;color:#484848;padding:5px 10px;display:flex;align-items:center;">
									<img src="/static/icons8-pencil-30.png" alt="" style="margin-right:20px" >
									<p style="margin:0px;font-size:12px;">Editor</p>	
								</li>
								<li onclick="setFieldType(this, 'URL')" style="cursor:pointer;margin:0;font-size:11px;font-weight:500;color:#484848;padding:5px 10px;display:flex;align-items:center;">
									<img src="/static/icons8-url-30.png" alt="" style="margin-right:20px" >
									<p style="margin:0px;font-size:12px;">URL</p>	
								</li>
								<li onclick="setFieldType(this, 'Image')" style="cursor:pointer;margin:0;font-size:11px;font-weight:500;color:#484848;padding:5px 10px;display:flex;align-items:center;">
									<img src="/static/icons8-image-30.png" alt="" style="margin-right:20px" >
									<p style="margin:0px;font-size:12px;">Image</p>	
								</li>
							</ul>
						</div>
					</td>
			`;
			const newRow = document.createElement("tr");
			newRow.innerHTML = htmlText;
			newRow.style.borderTop = '1px solid rgba(0,0,0,0.20)'
			table.appendChild(newRow);
		}

		

		function handleRepeater(selectElement) {
			var buttonElement = selectElement.nextElementSibling;
			if(selectElement.value === "Repeater"){
				buttonElement.style.display='inline-block';
			} else {
				buttonElement.style.display='none';
			}
		}

		function setFieldType(element, fieldType) {
			const parent = element.closest(".dropdown");
			const input = parent.querySelector("input[name='fieldType']");
			input.value = fieldType;
			const imgsrc = element.querySelector("img").src || "";
			const textcontent = element.querySelector("p").textContent;
			const targetButton = parent.querySelector("button");
			const htmlText = `
				<div style="cursor:pointer;margin:0;font-size:11px;font-weight:500;color:#484848;padding:5px 10px;display:flex;align-items:center;">
					<img src="${imgsrc}" alt="" style="margin-right:20px" >
					<p style="margin:0px;font-size:12px;">${textcontent}</p>	
				</div>
			`
			targetButton.innerHTML = htmlText;
		}

		function handlePostTypeConfirmation() {
			
			const element = document.getElementById("post-type-selector");
			if(element.value == ""){
				document.getElementById('post-type-link-confirmation').style.display = "none";
				return;
			}
			const postTypeId = element.value?.split("--")[0];
			const postTypeName = element.value?.split("--")[1];
			const input1 = document.getElementById("linkPostTypeName");
			const input2 = document.getElementById("linkPostTypeId");
			const p = document.getElementById("post-type-confirm-name");
			input1.value = postTypeName;
			input2.value = postTypeId;
			p.textContent = postTypeName;
			document.getElementById('post-type-link-confirmation').style.display = "flex"
		}

		function addfield() {
			// const empty = document.getElementById("empty-model-wr").style.display = "none";
			const inputsContainer = document.getElementById("inputs-container");
			const newdiv = document.createElement('div');
			newdiv.innerHTML = `<div class="input-group mb-3">
				<span style="color:#484848;background-color: #f5f5f5;font-weight: 500;border-radius: 0px;font-size: 13px;border:1px solid rgba(0, 0, 0, 0.25)" class="button-secondary">Key Name</span>
				<input type="text" style="font-size:13px;" class="form-control" placeholder="Enter a key" aria-label="Enter a key" required>
				<span style="color:#484848;background-color: #f5f5f5;font-weight: 500;border-radius: 0px;font-size: 13px;border:1px solid rgba(0, 0, 0, 0.25)" class="button-secondary">Data Type</span>
				<select class="form-select" onchange="handleRepeater(this)" style="font-size:13px;" aria-label="Default select example" required>
					<option selected value="String">String</option>
					<option value="Boolean">Boolean</option>
					<option value="Number">Number</option>
					<option value="Image">Image</option>
					<option value="Mixed">Editor</option>
					<option value="Array">Array</option>
				</select>
			</div>`;
			inputsContainer.appendChild(newdiv);
			window.scroll({
				top: document.body.scrollHeight,
				behavior: 'smooth'
			});
		}

		function unlinkPostType(postTypeName, postTypeId) {
			
			const modelId = document.getElementById("linkModelId").value;
			fetch("/api/v1/manage/unlink-post-type", {
				method:"POST",
				headers:{
					"Content-Type":"application/json"
				},
				body:JSON.stringify({postTypeId, postTypeName, modelId})
			}).then(res => res.json).then(data => window.location.reload())
		}

		function handleJsonParsing(val) {
			try {
				console.log('parsing val', val, typeof(val))
				return JSON.parse(val)
			} catch (error) {
				return val;
			}
		}

		function handlesubmit() {
			let data = {};
			const inputContainer = document.querySelector("#inputs-container");
			const modelName = inputContainer.querySelector("input[name='modelName']").value;
			const allInputs = inputContainer.querySelectorAll('input:not([name="modelName"]):not([name="modelId"])');
			allInputs.forEach(input => {
				const parent = input.closest(".input-group");
				const selectItem = parent.querySelector(".form-select");
				const inputValue = input.value;
				const selectValue = handleJsonParsing(selectItem.value);
				if(typeof(selectValue) === 'string'){
					data[inputValue?.split(" ").join("")] = selectValue;
				} else {
					data[inputValue?.split(" ").join("")] = selectValue;
				}
			})

			fetch("/api/v1/manage/add-model-data", {
				method:"POST",
				headers:{
					"Content-Type":"application/json"
				},
				body:JSON.stringify({ modelName,modelData:data})
			}).then(res => res.json()).then(data => window.location.reload())
		}

		function showAlert(postTypeName, postId) {
	    Swal.fire({
	        title: 'This posttype contains several posts',
	        text: 'To unlink this post type please delete all posts first!!',
	        icon: 'warning',
			timer: 2000,
	  timerProgressBar: true,
	  didOpen: () => {
	    const timer = Swal.getPopup().querySelector("b");
	    timerInterval = setInterval(() => {
	      timer.textContent = `${Swal.getTimerLeft()}`;
	    }, 100);
	  },
	  willClose: () => {
	    clearInterval(timerInterval);
	  }
	    })
	}
	</script>
</div>