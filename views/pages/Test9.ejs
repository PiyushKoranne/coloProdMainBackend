
<div style="width:80%;border-right: 1px solid rgba(0,0,0,0.25);">
	<div class="page-name" style="display:flex; align-items:center;justify-content:space-between;padding:8px 24px;">
		<h1 id="ejspageName" >Test9</h1>
		<button type="submit" form="page-data-form" style="margin:30px 0;padding: 7px 20px;border: none;background-color: #315BC1;color: white;font-weight: 600;font-size:18px" onclick="submitFields()">Update</button>
	</div>
	<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
	<style>
		.section-input-container .form-label button{
			opacity: 0;
			transition: all 300ms ease;
		}
		.section-input-container:hover .form-label button{
			opacity: 1;
		}
		.swal2-deny{
			background-color: #d8d8d8 !important;
			color: #000 !important;
		}
		.swal2-confirm{
			background-color: #315BC1 !important;
		}
		.swal2-confirm:focus {
			box-shadow: 0 0 0 3px #315BC111 !important;
		}
		.swal2-deny:focus {
			box-shadow: none !important;
		}
	</style>
	<!-- SECTION CONTAINER -->
	<div id="page-section-container" style="display: flex;width: 100%;flex-direction: column;align-items: center;justify-content: start;">
		<!-- SECTION DEFAULT RENDER 1 -->
		<div style="border-bottom: 1px solid rgba(0,0,0,0.25);padding: 25px 0px;width: 100%;">
			<div  style="margin: 0 auto;display: flex;flex-direction: column;align-items: center;justify-content: start;gap: 25px;width: 80%;">
				<input style="width: 100%;font-size: 54px;padding: 15px 25px;" type="text" placeholder="Add Title" name="default-title-Test9" id="">
				<textarea id="default-text-editor" style="width: 100%;padding: 15px 25px;" name="default-content-Test9" cols="30" rows="10" placeholder="Start writing text or HTML"></textarea>
			</div>
		</div>

		<!-- SECTION DEFAULT RENDER 2 -->
		<% for(let i=0; i < pageData.sections.length; i++) { %>
		<div class="section-wr" style="width: 100%;padding: 15px;border-bottom: 1px solid rgba(0,0,0,0.25);">
			<div style="width: 100%;">
				<input type="hidden" name="section-name" value="<%= pageData.sections[i].sectionName %>">
				<div style="width:100%;margin-bottom:10px; display: flex;align-items: center;justify-content: space-between;">
					<div style="width: 80%;">
						<input type="checkbox" class="section-choose-checkbox">
						<label style="font-size: 14px; font-weight: 600; color:#315BC1;font-style: italic;">Working on this section</label>
					</div>
					<div>
						<button onclick="hanldeRemoveSection('<%= pageData.sections[i].sectionName %>')" style="color: #C9356E;font-weight: 600;">Remove Section</button>
					</div>
				</div>
				<div>
					<h5><%= pageData.sections[i].sectionName %></h5>
				</div>
				<div class="inputFieldsContainer">
					<% for(let j=0; j < pageData.sections[i].sectionContent.length; j++) { %>
						<% if(pageData.sections[i].sectionContent[j].elementName == "input"){ %>
							<div class="section-input-container">
								<label class="form-label" for="<%= pageData.sections[i].sectionContent[j].elementAttrFor %>">
									<%= pageData.sections[i].sectionContent[j].elementLabelName %>
									<button onclick="handleElementDelete('<%= pageData.sections[i].sectionName %>', '<%= pageData.sections[i].sectionContent[j].elementAttrName %>')" style="border: none; color: #C9356E;font-weight: 700; font-size: 12px;"><i class="fa-solid fa-trash" style="color: #222b33;font-size: 12px; margin-right: 5px;"></i>Delete</button>
								</label>
								<input class="form-control mb-3" type="<%= pageData.sections[i].sectionContent[j].elementAttrType %>" name="<%= pageData.sections[i].sectionContent[j].elementAttrName %>" value="<%= pageData.sections[i].sectionContent[j].elementValue %>">
							</div>
						<% } else if(pageData.sections[i].sectionContent[j].elementName == "textarea") { %>
							<div class="section-input-container">
								<label class="form-label" for="<%= pageData.sections[i].sectionContent[j].elementAttrFor %>" >
									<%= pageData.sections[i].sectionContent[j].elementLabelName %>
									<button onclick="handleElementDelete('<%= pageData.sections[i].sectionName %>', '<%= pageData.sections[i].sectionContent[j].elementAttrName %>')" style="border: none; color: #C9356E;font-weight: 700; font-size: 12px;"><i class="fa-solid fa-trash" style="color: #222b33;font-size: 12px; margin-right: 5px;"></i>Delete</button>
								</label>
								<textarea class="mb-3" name="<%= pageData.sections[i].sectionContent[j].elementAttrName %>" id="<%= pageData.sections[i].sectionContent[j].elementAttrId %>" >
									<%= pageData.sections[i].sectionContent[j].elementValue %>
								</textarea>
							</div>
					<% } }%>
				</div>
			</div>
		</div>
		<% } %>
	</div>
  
	
</div>

<!-- Your existing content goes here -->

<!-- Right sidebar for adding new fields -->
<div id="sidebar" style="width:20%;height: 100%;padding: 10px;display: flex;flex-direction: column;align-items: center;justify-content: start;gap: 15px;" class="sidebar custom-field">
	
	<div style="width: 100%;">
		<h3 style="font-size: 16px;">Add New Section</h3>
		<button type="button" style="border: none; background-color: #315BC1;color: #fff;padding: 7px 16px;font-size: 13x;font-weight: 600;" onclick="openNewSectionModal()">Add Section</button>
	</div>
	<div style="width: 100%;">
		<h3 style="font-size: 16px;">Add New Field</h3>
		<form id="addFieldForm">
			<label for="elementType" style="font-size: 15px;">Select Element Type:</label>
			<select style="font-weight: 400;width: 100%;padding: 5px;margin: 10px 0;" id="elementType">
				<option value="input">Input Field</option>
				<option value="ckeditor">CKEditor</option>
			</select>
			<label for="elementAttrName" class="form-label" style="font-size: 15px;">Name Attribute:</label>
			<input class="form-control mb-3" id="elementAttrName" type="text" name="elementArrtName">
			<button type="button" style="border: none;color: #000;padding: 7px 16px;font-size: 13x;font-weight: 600;" onclick="openNameModal()">Add Field</button>
		</form>
	</div>
</div>

<!-- Modal for inputting section name -->
<div id="sectionModal" class="modal">
	<div class="modal-content">
		<span class="close" onclick="closeSectionModal()">&times;</span>
		<div style="padding: 20px 0;">
			<label class="pb-2" for="elementName">Section Name:</label>
			<input style="width: 100%;display: block;" type="text" id="sectionName" required>
			<button class="mt-3" style="border: none;background-color: #315BC1;color: #fff;padding: 7px 16px;font-size: 13x;font-weight: 600;" onclick="addSection()">Add Section</button>
		</div>
	</div>
</div>

<!-- Modal for inputting element name -->
<div id="nameModal" class="modal">
	<div class="modal-content">
		<span class="close" onclick="closeNameModal()">&times;</span>
		<div style="padding: 20px 0;">
			<label class="pb-2" for="elementName">Field Name:</label>
			<input style="width: 100%;display: block;" type="text" id="elementName" required>
			<button class="mt-3" style="border: none;background-color: #C9356E;color: #fff;padding: 7px 16px;font-size: 13x;font-weight: 600;" onclick="addElement()">Add Field</button>
		</div>
	</div>
</div>

<script>
	window.addEventListener("DOMContentLoaded", ()=>{
		
		CKEDITOR.replace(document.getElementById("default-text-editor"), {
			on: {
			instanceReady: function (evt) {
				// Store the textarea name along with the CKEditor instance
				evt.editor.textareaName = document.getElementById("default-text-editor").getAttribute("name");
			}
			}
     	});
		
		const sections = document.querySelectorAll('.section-wr');
		sections.forEach(section => {
			let textareas = section.querySelectorAll("textarea");
			textareas.forEach(textarea =>{
				
				CKEDITOR.replace(textarea, {
					on: {
					instanceReady: function (evt) {
						// Store the textarea name along with the CKEditor instance
						evt.editor.textareaName = textarea.getAttribute("name");
					}
					}
				});
			})
		})
	})
	
	function openNewSectionModal() {
		const modal = document.getElementById('sectionModal');
		modal.style.display = 'block';
	}

	function closeSectionModal() {
		const modal = document.getElementById('sectionModal');
		modal.style.display = 'none';
	}
	function openNameModal() {
		const modal = document.getElementById('nameModal');
		modal.style.display = 'block';
	}

	function closeNameModal() {
		const modal = document.getElementById('nameModal');
		modal.style.display = 'none';
	}

	function addSection() {
		const ejsPageName = document.getElementById("ejspageName").textContent;
		const sectionName = document.getElementById("sectionName").value;
		fetch("/api/v1/manage/add-section", {
			method:"POST",
			headers:{
				"Content-Type":"application/json"
			},
			body:JSON.stringify({ejsPageName, sectionName})
		}).then(res => res.json()).then(data => {
			window.location.reload();
		})

		closeSectionModal();
	}

	function hanldeRemoveSection(sectionName) {
		const ejsPageName = document.getElementById("ejspageName").textContent;
		Swal.fire({
			title: 'Do you want to remove this section?',
			showDenyButton: true,
			showCancelButton: false,
			confirmButtonText: 'Remove Section',
			denyButtonText: 'Cancel',
			customClass: {
				actions: 'my-actions',
				cancelButton: 'order-1 right-gap',
				confirmButton: 'order-2',
			},
		}).then((result) => {
			if (result.isConfirmed) {
				fetch("/api/v1/manage/remove-page-section", {
					method:"POST",
					headers:{
						"Content-Type":"application/json"
					},
					body:JSON.stringify({ejsPageName,sectionName, elementAttrName})
				}).then(()=>{
					window.location.reload();
				})
			} else if (result.isDenied) {
				Swal.fire('Changes are not saved', '', 'info')
			}
		})
	}

	function handleElementDelete(sectionName, elementAttrName) {
		const ejsPageName = document.getElementById("ejspageName").textContent;
		Swal.fire({
			title: 'Do you want to delete this element?',
			showDenyButton: true,
			showCancelButton: false,
			confirmButtonText: 'Delete Element',
			denyButtonText: 'Cancel',
			customClass: {
				actions: 'my-actions',
				cancelButton: 'order-1 right-gap',
				confirmButton: 'order-2',
			},
		}).then((result) => {
			if (result.isConfirmed) {
				fetch("/api/v1/manage/remove-section-element", {
					method:"POST",
					headers:{
						"Content-Type":"application/json"
					},
					body:JSON.stringify({ejsPageName,sectionName, elementAttrName})
				}).then(()=>{
					window.location.reload();
				})
			} else if (result.isDenied) {
				Swal.fire('Changes are not saved', '', 'info')
			}
		})
	}

	function addElement() {
		const ejsPageName = document.getElementById("ejspageName").textContent;
		const elementType = document.getElementById('elementType').value;
		const elementName = document.getElementById('elementName').value;
		const elementAttrName = document.getElementById("elementAttrName").value;
		const checked = document.querySelectorAll(".section-choose-checkbox");
		let elementObject = undefined;
		let sectionName = undefined;
		checked.forEach(checkItem => {
			if(checkItem.checked){
				var parentDiv = checkItem.parentNode.parentNode.parentNode;
				sectionName = parentDiv.querySelector("div h5").textContent;
				// Find the sibling div with class "inputFieldsContainer"
				const inputFieldsContainer = parentDiv.querySelector('.inputFieldsContainer');
				if (elementType === 'input') {
					elementObject = {
						elementName:"input",
						elementClass:"form-control",
						elementLabelName:elementName,
						elementAttrName:elementAttrName,
						elementAttrId:"",
						elementAttrType:"text",
						elementAttrFor:"",
						elementValue:"",
					}
				} else if (elementType === 'ckeditor') {
					elementObject = {
						elementName:"textarea",
						elementLabelName:elementName,
						elementAttrName:elementAttrName,
						elementAttrId:elementAttrName+"-editor-gen",
						elementAttrType:"text",
						elementAttrFor:elementAttrName+"-editor-gen",
						elementValue:"",
						elementAttrIsEditor:true
					}
				}
				if(elementObject && sectionName){
					fetch("/api/v1/manage/add-element", {
						method:"POST",
						headers:{
							"Content-Type":"application/json"
						},
						body: JSON.stringify({ejsPageName, sectionName, elementData:elementObject})
					}).then(res => res.json()).then(data => {
						window.location.reload();
					})
				}
			}
			
		})
		closeNameModal();
	}

	function addInputField() {
		openNameModal();
	}

	async function submitFields() {
		// ejspage name will also come
		const ejsPageName = document.getElementById("ejspageName").textContent;
		const data = { ejsPageName, sections: []};
		const sections = document.querySelectorAll('.section-wr');
		sections.forEach(section => {
			let sectionContent = [];
			let sectionNameInput = section.querySelector('input[name="section-name"]');
			const allInputs = section.querySelectorAll('input:not([name="section-name"])');
			allInputs.forEach(inputItem => {
				sectionContent.push({
					elementName:"input",
					elementAttrName:inputItem.getAttribute('name'),
					elementValue:inputItem.value,
				})
			})
			const allTextAreas = section.querySelectorAll('textarea');
			for (var instanceName in CKEDITOR.instances) {
				if (CKEDITOR.instances.hasOwnProperty(instanceName)) {
					var editor = CKEDITOR.instances[instanceName];
					var editorContent = editor.getData();

					sectionContent.push({
						elementName:"textarea",
						elementAttrName:editor.textareaName,
						elementValue:editorContent,
					})
					// Log the content to the console or use it as needed
				}
			}
			// for text area also
			data.sections.push({
				sectionName: sectionNameInput.value,
				sectionContent
			})
		})
		fetch("/api/v1/manage/save-page-data", {
			method:"POST",
			headers:{
				"content-Type":"application/json"
			},
			body:JSON.stringify(data)
		})
		.then(()=>{ window.location.reload() }).catch(err => console.log(err))
	}
</script>

