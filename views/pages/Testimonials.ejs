

<div style="width:80%;border-right: 1px solid rgba(0,0,0,0.25);overflow-y:scroll;height:100%">
	<div class="page-name" style="display:flex; align-items:center;justify-content:space-between;padding:8px 24px;">
		<h1 id="ejspageName">Testimonials</h1>
	</div>
	<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
	<style>
		.section-input-container .form-label button{
			opacity: 0;
			transition: all 300ms ease;
		}
		.section-input-container:hover .form-label button{
			opacity: 1;
		}
		.swal2-deny{
			background-color: #d8d8d8 !important;
			color: #000 !important;
		}
		.swal2-confirm{
			background-color: #315BC1 !important;
		}
		.swal2-confirm:focus {
			box-shadow: 0 0 0 3px #315BC111 !important;
		}
		.swal2-deny:focus {
			box-shadow: none !important;
		}
	</style>
	<!-- SECTION CONTAINER -->
	<div id="page-section-container" style="display: flex;width: 100%;flex-direction: column;align-items: center;justify-content: start;">
		<!-- SECTION DEFAULT RENDER 1 -->
		<div style="border-bottom: 1px solid rgba(0,0,0,0.25);padding: 25px 0px;width: 100%;">
			<div  style="margin: 0 auto;display: flex;flex-direction: column;align-items: center;justify-content: start;gap: 25px;width: 80%;">
				<input value="<%= pageData?.pageDefaultTitle %>" style="width: 100%;font-size: 54px;padding: 15px 25px;" type="text" placeholder="Add Title" name="pageDefaultTitle" id="default-page-title">
				<textarea id="default-page-content" style="width: 100%;padding: 15px 25px;" name="pageDefaultContent" cols="30" rows="10" placeholder="Start writing text or HTML">
				<%= pageData?.pageDefaultContent %>
				</textarea>
			</div>
		</div>

		<!-- SECTION DEFAULT RENDER 2 -->
		<% for(let i=0; i < pageData.sections.length; i++) { %>
		<div class="section-wr" style="width: 100%;padding: 15px;border-bottom: 1px solid rgba(0,0,0,0.25);">
			<div style="width: 100%;">
				<input type="hidden" name="section-name" value="<%= pageData.sections[i].sectionName %>">
				<div style="width:100%;margin-bottom:10px; display: flex;align-items: center;justify-content: space-between;">
					<div style="width: 80%;">
						<input id="<%= pageData.sections[i].sectionName?.toLowerCase().split(' ').join() %>" type="checkbox" class="section-choose-checkbox">
						<label style="font-size: 13px; font-weight: 600; color:#315BC1;font-style: italic;" for="<%= pageData.sections[i].sectionName?.toLowerCase().split(' ').join() %>">Working on this section</label>
					</div>
					<% if(pageData.sections[i].sectionName !== "SEO")  { %>
					<div>
						<button onclick="hanldeRemoveSection('<%= pageData.sections[i].sectionName %>')" style="color: #C9356E;font-weight: 600;">Remove Section</button>
					</div>
					<% } %>
				</div>
				<div>
					<h5><%= pageData.sections[i].sectionName %></h5>
				</div>
				<div class="inputFieldsContainer">
					<% if(pageData.sections[i].sectionContent.length > 0) { for(let j=0; j < pageData.sections[i].sectionContent.length; j++) { %>
						<% if(pageData.sections[i].sectionContent[j].elementName == "input" && pageData.sections[i].sectionContent[j].elementAttrType === 'file'){ %>
							<div class="section-input-container">
								<label class="mb-3 mt-3" style="display: block;">Image Preview:</label>
								<div class="mb-3">
									<img src="/images/<%= pageData.sections[i].sectionContent[j].elementAttrSrcImg || 'icons8-image-100.png' %>" style="width: 150px;height: auto;box-shadow: 2px 2px 12px 0px rgba(0,0,0,0.25);border-radius: 10px;" alt="<%= pageData.sections[i].sectionContent[j].elementAttrAltImg %>">
								</div>
								<label class="form-label" for="<%= pageData.sections[i].sectionContent[j].elementAttrFor %>">
									<%= pageData.sections[i].sectionContent[j].elementLabelName %>
									<button onclick="handleElementDelete('<%= pageData.sections[i].sectionName %>', '<%= pageData.sections[i].sectionContent[j].elementAttrName %>')" style="border: none; color: #C9356E;font-weight: 700; font-size: 12px;"><i class="fa-solid fa-trash" style="color: #222b33;font-size: 12px; margin-right: 5px;"></i>Delete</button>
								</label>
								<input class="form-control mb-3" type="<%= pageData.sections[i].sectionContent[j].elementAttrType %>" name="<%= pageData.sections[i].sectionContent[j].elementAttrName %>" value="<%= pageData.sections[i].sectionContent[j].elementValue %>">
							</div>
						<% } else if(pageData.sections[i].sectionContent[j].elementName == "input"){ %>
							<div class="section-input-container">
								<label class="form-label" for="<%= pageData.sections[i].sectionContent[j].elementAttrFor %>">
									<%= pageData.sections[i].sectionContent[j].elementLabelName %>
									<button onclick="handleElementDelete('<%= pageData.sections[i].sectionName %>', '<%= pageData.sections[i].sectionContent[j].elementAttrName %>')" style="border: none; color: #C9356E;font-weight: 700; font-size: 12px;"><i class="fa-solid fa-trash" style="color: #222b33;font-size: 12px; margin-right: 5px;"></i>Delete</button>
								</label>
								<input class="form-control mb-3" type="<%= pageData.sections[i].sectionContent[j].elementAttrType %>" name="<%= pageData.sections[i].sectionContent[j].elementAttrName %>" value="<%= pageData.sections[i].sectionContent[j].elementValue %>">
							</div>
						<% } else if(pageData.sections[i].sectionContent[j].elementName == "textarea") { %>
							<div class="section-input-container">
								<label class="form-label" for="<%= pageData.sections[i].sectionContent[j].elementAttrFor %>" >
									<%= pageData.sections[i].sectionContent[j].elementLabelName %>
									<button onclick="handleElementDelete('<%= pageData.sections[i].sectionName %>', '<%= pageData.sections[i].sectionContent[j].elementAttrName %>')" style="border: none; color: #C9356E;font-weight: 700; font-size: 12px;"><i class="fa-solid fa-trash" style="color: #222b33;font-size: 12px; margin-right: 5px;"></i>Delete</button>
								</label>
								<textarea class="mb-3" name="<%= pageData.sections[i].sectionContent[j].elementAttrName %>" id="<%= pageData.sections[i].sectionContent[j].elementAttrId %>" >
									<%= pageData.sections[i].sectionContent[j].elementValue %>
								</textarea>
							</div>
						<% } else if(pageData.sections[i].sectionContent[j].elementName == "array") { %>
							<div style="font-size: 13px;">
								<label class="form-label mt-3">
									<%= pageData.sections[i].sectionContent[j].elementLabelName %>
								</label>
								<button onclick="openItemModal('<%= pageData.sections[i].sectionContent[j].elementAttrName %>', '<%= pageData.sections[i].sectionName %>')" type="button"
									class="button-secondary" style="display: block;margin-bottom: 15px;">
									<i class="fa-solid fa-plus" style="margin-right: 10px;"></i>Add new item
								</button>
								<% if(pageData.sections[i].sectionContent[j].elementItems?.length > 0) { %>
									<table width="100%" cellpadding="0" cellspacing="0">
										<thead>
											<tr style="border-bottom: 1px solid rgba(0,0,0,0.25);background-color:aliceblue;">
												<th></th>
												<th style="padding:10px 0px">Index</th>
												<th>Id</th>
												<th>Item</th>
												<th>Item Type</th>
												<th>Actions</th>
											</tr>
										</thead>
										<tbody class="sortable" data-sectionname="<%= pageData.sections[i].sectionName %>" data-arrayname="<%= pageData.sections[i].sectionContent[j].elementAttrName %>">
											<% pageData.sections[i].sectionContent[j].elementItems.forEach((arrayitem, index)=> { %>
												<tr style="border-bottom: 1px solid rgba(0,0,0,0.25);background-color:#fff;">
													<td
														style="padding: 5px 10px;font-size: 13px;font-weight: 600;">
														<i class="fa-solid fa-grip-vertical"></i></td>
													<td
														style="padding: 5px 10px;font-size: 13px;font-weight: 600;">
														<%= index+1 %>
													</td>
													<td
														style="padding: 5px 10px;font-size: 13px;font-weight: 600;">
														<%= arrayitem?.id %>
													</td>
													<td
														style="padding: 5px 10px;font-size: 13px;font-weight: 600;">
														<% if(arrayitem.type==="String" ) { %>
															<%= arrayitem.value %>
														<% } else if(arrayitem.type==="Textarea" ) { %>
															<button
																onclick="openEditorViewer('<%= pageData.sections[i].sectionName %>','<%= pageData.sections[i].sectionContent[j].elementAttrName %>','<%= arrayitem.id %>','<%= arrayitem.type %>','<%= JSON.stringify(arrayitem.value) %>')"
																class="button-secondary">
																<strong style="color: #2a5298;">Text Content</strong>(Click to View)
															</button>
														<% } else if(arrayitem.type==="JSON" ) { %>
															<button type="button"
																onclick="openJSONViewer('<%= pageData.sections[i].sectionContent[j].elementAttrName %>', '<%= arrayitem.id %>', '<%= arrayitem.type %>', '<%= JSON.stringify(arrayitem.value) %>', '<%= index %>' )"
																class="button-secondary"><strong
																	style="color: #2a5298;">JSON
																	Data</strong> (Click to
																View)</button>
														<% } else if(arrayitem.type==="Image" ) { %>
															<img src="/images/<%= arrayitem.value %>" width="50" alt="">
														<% } %>
													</td>
													<td
														style="padding: 5px 10px;font-size: 13px;font-weight: 600;">
														<%= arrayitem.type %>
													</td>
													<td
														style="padding: 5px 10px;font-size: 13px;font-weight: 600;">
														<i class="fa-solid fa-trash-can"
															style="cursor: pointer;"
															onclick="deleteArrayItem('<%= pageData.sections[i].sectionName %>','<%= pageData.sections[i].sectionContent[j].elementAttrName %>', '<%= arrayitem.id %>')"></i>
													</td>
												</tr>
												<% }) %>
										</tbody>
									</table>
									<% } %>
							</div>
						<% } else if(pageData.sections[i].sectionContent[j].elementName == "input-button"){ %>
							<div class="section-input-container">
								<label style="display: block;" class="form-label" for="<%= pageData.sections[i].sectionContent[j].elementAttrFor %>">
									<%= pageData.sections[i].sectionContent[j].elementLabelName %>
									<button onclick="handleElementDelete('<%= pageData.sections[i].sectionName %>', '<%= pageData.sections[i].sectionContent[j].elementAttrName %>')" style="border: none; color: #C9356E;font-weight: 700; font-size: 12px;"><i class="fa-solid fa-trash" style="color: #222b33;font-size: 12px; margin-right: 5px;"></i>Delete</button>
								</label>
								<button onclick="openButtonModal('<%= pageData.sections[i].sectionContent[j].elementValue %>','<%= pageData.sections[i].sectionContent[j].elementAttrName %>','<%= pageData.sections[i].sectionName %>', '<%= pageData.sections[i].sectionContent[j].elementAttrHref %>')" style="padding: 10px 15px;" class="button-secondary">
									<%= pageData.sections[i].sectionContent[j].elementValue || "Click to add data" %>
									<% if(pageData.sections[i].sectionContent[j].elementAttrHref) { %>
										<span style="font-weight: 600; color: #315BC1; border-left:1px solid rgba(0,0,0,0.25);padding-left: 10px;" >Link: <%= pageData.sections[i].sectionContent[j].elementAttrHref %></span>
									<% } %>
								</button>
							</div>
						<% } else if(pageData.sections[i].sectionContent[j].elementName == "input-link"){ %>
							<div class="section-input-container">
								<label style="display: block;" class="form-label" for="<%= pageData.sections[i].sectionContent[j].elementAttrFor %>">
									<%= pageData.sections[i].sectionContent[j].elementLabelName %>
									<button onclick="handleElementDelete('<%= pageData.sections[i].sectionName %>', '<%= pageData.sections[i].sectionContent[j].elementAttrName %>')" style="border: none; color: #C9356E;font-weight: 700; font-size: 12px;"><i class="fa-solid fa-trash" style="color: #222b33;font-size: 12px; margin-right: 5px;"></i>Delete</button>
								</label>
								<button onclick="openLinkModal('<%= pageData.sections[i].sectionContent[j].elementAttrName %>','<%= pageData.sections[i].sectionName %>')" style="padding: 10px 15px; background-color: #d8d8d8;border:none; border-bottom: 2px solid #315BC1;">
									<%= pageData.sections[i].sectionContent[j].elementValue || "Click to add data" %>
									<% if(pageData.sections[i].sectionContent[j].elementAttrHref) { %>
										<span style="font-weight: 600; color: #315BC1; border-left:1px solid rgba(0,0,0,0.25);padding-left: 10px;" >Link: <%= pageData.sections[i].sectionContent[j].elementAttrHref %></span>
									<% } %>
								</button>
							</div>
						<% }} } else { %>
							<div style="background-color: #fff;border-radius: 6px;border:1px solid rgba(0,0,0,0.25);display: flex;align-items: center;justify-content: center;flex-direction: column;gap: 0px;padding: 15px;">
								<h3 style="color: #484848;font-size: 18px;">No elements present in this section</h3>
								<p style="font-size: 13px;font-weight: 400;color: #484848;margin: 0;">Add Elements to continue!</p>
							</div>
						<% } %>
				</div>
			</div>
		</div>
		<% } %>
	</div>
</div>

<!-- Your existing content goes here -->

<!-- Right sidebar for adding new fields -->
<div id="sidebar" style="width:20%;height: 100%;padding: 10px;display: flex;flex-direction: column;align-items: center;justify-content: start;gap: 15px;" class="sidebar custom-field">
	<div style="background-color: #fff;border-radius: 8px; padding: 10px; width: 100%;border: 1px solid rgba(0,0,0,0.25);display: flex;flex-direction: column;gap: 5px;">
		<h5 style="font-weight: 600; font-size: 14px; text-transform: uppercase;margin-bottom: 15px; border-bottom: 1px solid rgba(0,0,0,0.25);padding-bottom: 5px;">Publish</h5>
		<div style="display: flex;align-items: center;gap: 10px;">
			<i style="text-align: center;width: 15px;display: inline-block;color: #484848;font-size: 14px;" class="fa-solid fa-map-pin"></i>
			<span style="display: inline-block;color: #484848;font-weight:500;font-size: 13px;">Status</span>
			<span style="display: inline-block;color: #65B741;font-weight:600;font-size: 13px;text-transform: uppercase;">Published</span>
		</div>
		<div style="display: flex;align-items: center;gap: 10px;">
			<i style="text-align: center;width: 15px;display: inline-block;color: #484848;font-size: 14px;" class="fa-solid fa-eye"></i>
			<span style="display: inline-block;color: #484848;font-weight:500;font-size: 13px;">Visibility</span>
			<span style="display: inline-block;color: #484848;font-weight:500;font-size: 13px;">Visible</span>
		</div>
		<div style="display: flex;align-items: center;gap: 10px;">
			<i style="text-align: center;width: 15px;display: inline-block;color: #484848;font-size: 14px;" class="fa-solid fa-code-compare"></i>
			<span style="display: inline-block;color: #484848;font-weight:500;font-size: 13px;">Revisions</span>
			<span style="display: inline-block;color: #484848;font-weight:500;font-size: 13px;">3</span>
		</div>
		<button type="submit" form="page-data-form" class="mt-3 button-main button-main-md" onclick="submitFields()"
		>Update Page</button>
	</div>
	<div style="background-color: #fff;border-radius: 8px; padding: 10px; width: 100%;border: 1px solid rgba(0,0,0,0.25);display: flex;flex-direction: column;gap: 5px;">
		<h5 style="font-weight: 600; font-size: 14px; text-transform: uppercase;border-bottom: 1px solid rgba(0,0,0,0.25);padding-bottom: 5px;">Sections</h5>
		<ul style="color: #484848;font-weight:600;font-size: 14px;">
			<% pageData.sections.forEach(section => { %>
				<li><%= section?.sectionName %></li>
			<% }) %>	
		</ul>
		<div style="width: 100%; display: flex; align-items: center; justify-content: space-between;border-top: 1px solid rgba(0,0,0,0.25); padding-top: 10px;">
			<h3 style="font-size: 14px;margin: 0;font-weight: 600;">Add New Section</h3>
			<button type="button" class="button-main button-main-sm" onclick="openNewSectionModal()">Add</button>
		</div>
	</div>
	<div style="background-color: #fff;border-radius: 8px; padding: 10px; width: 100%;border: 1px solid rgba(0,0,0,0.25);display: flex;flex-direction: column;gap: 5px;">
		<h5 style="font-weight: 600; font-size: 14px; text-transform: uppercase;border-bottom: 1px solid rgba(0,0,0,0.25);padding-bottom: 5px;">Add new field</h5>
		<form id="addFieldForm">
			<label for="elementType" style="font-size: 13px;">Select Element Type:</label>
			<select style="font-weight: 400;width: 100%;padding: 5px;margin: 10px 0;font-size: 13px;" id="elementType">
				<option value="input">Input Field</option>
				<option value="ckeditor">CKEditor</option>
				<option value="button">Button/Link</option>
				<option value="array">Array</option>
				<option value="image-uploader">Image Uploader</option>
			</select>
			<div style="text-align: right;">
				<button type="button" class="button-main button-main-sm" onclick="openNameModal()">Add Field</button>
			</div>
		</form>
	</div>
</div>

<!-- Modal for inputting section name -->
<div id="sectionModal" class="modal">
	<div class="modal-content">
		<span class="close" onclick="closeSectionModal()">&times;</span>
		<div style="padding: 20px 0;">
			<label class="pb-2" for="elementName">Section Name:</label>
			<input style="width: 100%;display: block;" type="text" id="sectionName" required>
			<button class="mt-3 button-main button-main-md" onclick="addSection()">Add Section</button>
		</div>
	</div>
</div>

<!-- Modal for inputting element name -->
<div id="nameModal" class="modal">
	<div class="modal-content">
		<span class="close" onclick="closeNameModal()">&times;</span>
		<div style="padding: 20px 0;">
			<label class="pb-2" for="elementName">Field Title:</label>
			<input style="width: 100%;display: block;" type="text" id="elementName" required>
			<label for="elementAttrName" class="form-label" style="font-size: 13px;">Name Attribute:</label>
			<input  style="width: 100%;display: block;" id="elementAttrName" type="text" name="elementArrtName">
			<div id="image-uploader-wr" style="display: none;">
				<label for="elementAttrAltImg" class="form-label" style="font-size: 13px;">Image Alt Attribute:</label>
				<input  style="width: 100%;display: block;" id="elementAttrAltImg" type="text" name="elementAttrAltImg">
			</div>
			<button class="mt-3 button-main button-main-md" onclick="addElement()">Add Field</button>
		</div>
	</div>
</div>

<!-- Modal for adding button data -->
<div id="buttonModal" class="modal">
	<div class="modal-content">
		<span class="close" onclick="closeButtonModal()">&times;</span>
		<div style="padding: 20px 0;">
			<label class="pb-2" for="buttonTitle">Button Title:</label>
			<input style="width: 100%;display: block;" type="text" id="buttonTitle" required>
			<label for="buttonLink" class="form-label pb-2 mt-3" style="font-size: 13px;">Button Link:</label>
			<input style="width: 100%;display: block;" id="buttonLink" type="text" name="elementArrtName">
			<button class="mt-3 button-main button-main-md" onclick="addButtonData()">Add / Update</button>
		</div>
	</div>
</div>

<!-- Modal for adding button data -->
<div id="linkModal" class="modal">
	<div class="modal-content">
		<span class="close" onclick="closeLinkModal()">&times;</span>
		<div style="padding: 20px 0;">
			<label class="pb-2" for="linkTitle">Link Title:</label>
			<input style="width: 100%;display: block;" type="text" id="linkTitle" required>
			<label for="linkHref" class="form-label" style="font-size: 13px;">Link Href:</label>
			<input style="width: 100%;display: block;" id="linkHref" type="text" name="elementArrtName">
			<button class="mt-3 button-main button-main-md" onclick="addLinkData()">Add Field</button>
		</div>
	</div>
</div>

<!-- Modal for Adding Array Item -->
<div id="arrayItemModal" class="modal">
	<div class="modal-content" id="modal-input-container">
		<span class="close" onclick="closeArrayItemModal()">&times;</span>
		<!-- <form action="/api/v1/manage/add-post-array-item" method="POST" enctype="multipart/form-data"> -->
		<input type="hidden" id="arrayItemNamePointer" name="arrayItemNamePointer">
		<div id="item-modal-content" style="padding: 20px 0;font-size: 13px;">
			<label for="itemType" class="mb-3">Choose the item type</label>
			<select onchange="chooseItemType()" name="itemType" id="itemType"
				style="display: block;width: 100%;padding: 5px 10px; background-color: aliceblue;margin-bottom: 5px;">
				<option value="">Choose a type</option>
				<option value="String">String</option>
				<option value="Textarea">Textarea</option>
				<option value="Image">Image</option>
			</select>
			<button id="add-item-last-btn" class="mt-3 button-main button-main-md" onclick="addItem()">Add Item</button>
		</div>
		<!-- </form> -->
	</div>
</div>

<!-- Modal for editing textarea item content -->
<div id="jsonviewModal" class="modal">
	<div class="modal-content" id="modal-input-container">
		<span class="close" onclick="closeJsonViewModel()">&times;</span>
		<input type="hidden" id="arrayName" name="arrayName">
		<input type="hidden" id="itemId" name="itemId">
		<div id="item-modal-content" style="padding: 20px 0;font-size: 13px;">
			<label for="jsonContent" style="display: block;" class="mb-3">Choose the item type</label>
			<textarea id="jsonContent" style="width: 100%;height: 200px;" type="text"></textarea>
		</div>
		<button class="button-main button-main-md" onclick="updateItemTextContent()">Update JSON</button>
	</div>
</div>

<script src="https://unpkg.com/sortablejs@1.14.0/Sortable.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/notyf@3/notyf.min.js"></script>
<script>
	const notyf = new Notyf({
		types: [
			{
				type: 'info',
				background: 'linear-gradient(to top, #1e3c72 0%, #1e3c72 1%, #2a5298 100%)',
				icon: false,
				dismissible:true
			},
			{
				type: "error",
				background: "radial-gradient(371px at 2.9% 14.3%, rgb(255, 0, 102) 0%, rgb(80, 5, 35) 100.7%)",
				icon:false,
				dismissible:true
			}
		]
	});
	let buttonNamePointer;
	let buttonLinkPointer;
	let sectionNamePointer;
	let arrayItemNamePointer;
	window.addEventListener("DOMContentLoaded", ()=>{
		CKEDITOR.replace(document.getElementById("default-page-content"), {
			on: {
			instanceReady: function (evt) {
				// Store the textarea name along with the CKEditor instance
				evt.editor.textareaName = document.getElementById("default-page-content").getAttribute("name");
			}
			}
     	});
		CKEDITOR.replace(document.getElementById("jsonContent"), {
			on: {
			instanceReady: function (evt) {
				// Store the textarea name along with the CKEditor instance
				evt.editor.textareaName = 'itemValue';
			}
			}
     	});
		
		const sections = document.querySelectorAll('.section-wr');
		sections.forEach(section => {
			let textareas = section.querySelectorAll("textarea");
			textareas.forEach(textarea =>{
				CKEDITOR.replace(textarea, {
					on: {
					instanceReady: function (evt) {
						// Store the textarea name along with the CKEditor instance
						evt.editor.textareaName = textarea.getAttribute("name");
					}
					}
				});
			})
		})

		new Sortable(document.querySelector('.sortable'), {
			animation: 150, // Customize the animation speed
			direction: 'vertical', // Allow vertical sorting only
			onEnd: function (evt) {
				const ejsPageName = document.getElementById("ejspageName").textContent;
				var newOrder = Array.from(evt.from.children).map(function (el) {
					const dataElem = el.querySelector("td:nth-child(3)")

					return dataElem.textContent.trim()
				});

				fetch("/api/v1/manage/order-page-section-array-item", {
					method: "POST",
					headers: {
						"Content-Type": "application/json"
					},
					body: JSON.stringify({ ejsPageName, arrayItemNamePointer: evt.to.dataset.arrayname, sectionName:evt.to.dataset.sectionname, order: newOrder })
				})
				.then(res => res.json())
				.then(data => { window.location.reload(); })
			},
		});
	})

	function deleteArrayItem(sectionName, arrayName, itemId) {
		const ejsPageName = document.getElementById("ejspageName").textContent;
		fetch("/api/v1/manage/delete-page-array-item", {
			method:"POST",
			headers:{
				"Content-Type":"application/json"
			},
			body:JSON.stringify({ejsPageName, sectionName, arrayName, itemId})
		})
		.then(res => res.json())
		.then(data => data.success && window.location.reload());
	}

	function openEditorViewer(sectionName, arrayName, itemId, itemType, itemValue, index) {
		
		sectionNamePointer = sectionName;
		document.getElementById("jsonviewModal").style.display = "block";
		const editor = CKEDITOR.instances['jsonContent'];
		editor.setData(`${itemValue?.replaceAll('"','')}`);
		// document.getElementById("jsonContent").value = itemValue;
		document.getElementById("itemId").value = itemId;
		document.getElementById("arrayName").value = arrayName;
	}

	function updateItemTextContent() {
		const itemId = document.getElementById("itemId").value;
		const arrayName = document.getElementById("arrayName").value;
		const editor = CKEDITOR.instances['jsonContent'];
		const itemValue = editor.getData();
		const ejsPageName = document.getElementById("ejspageName").textContent;
		fetch("/api/v1/manage/update-page-item-textcontent", {
			method:"POST",
			headers:{
				"Content-Type":"application/json"
			},
			body:JSON.stringify({ejsPageName, sectionName:sectionNamePointer, arrayName, itemId, itemValue})
		})
		.then(res => res.json())
		.then(data => data?.success && window.location.reload());
	}

	function closeJsonViewModel() {
		document.getElementById("jsonviewModal").style.display = "none";
	}

	function addItem(){
		const ejsPageName = document.getElementById("ejspageName").textContent;
		const sectionName = document.getElementById("sectionName").value;
		const formData = new FormData();
		const container = document.querySelector("#modal-input-container");
		const selector = container.querySelector("#itemType");
		formData.append(selector.getAttribute("name"), selector.value);
		formData.append("ejsPageName", ejsPageName);
		formData.append("sectionName", sectionNamePointer);
		const allInputs = container.querySelectorAll("input:not([type='file'])");
		if (allInputs?.length > 0) {
			allInputs.forEach(input => {
				formData.append(input.getAttribute("name"), input.value);
			})
		}
		const textarea = CKEDITOR.instances['array-item-textarea'];
		
		if (textarea && textarea.textareaName === "itemValue") {
			formData.append(document.getElementById("array-item-textarea").getAttribute("name"), textarea.getData());
		}
		const allFileInputs = container.querySelectorAll("input[type='file']");
		if (allFileInputs?.length > 0) {
			allFileInputs.forEach(fileInput => {
				formData.append(fileInput.getAttribute("name"), fileInput.files[0])
			});
		}
		fetch("/api/v1/manage/add-page-section-array-item", {
			method: "POST",
			body: formData
		})
		.then(res => res.json())
		.then(data => window.location.reload())
	}

	function chooseItemType() {
			
			const select = document.getElementById("itemType");
			const clear = document.getElementById("new-item-container");
			if (clear) {
				const parentElement = clear.parentNode;
				parentElement.removeChild(clear);
			}
			if (select.value === "") {
				const parent = document.getElementById("item-modal-content");
				parent.removeChild(document.getElementById("new-item-container"));
				arrayItemNamePointer = "";
				document.getElementById("arrayItemNamePointer").value = arrayItemNamePointer;
				return;
			} else {
				if (select.value === "String") {
					const htmlText = `
					<label class="mb-3" for="elementName">ITEM CONTENT:</label>
					<input name="itemValue" style="width: 100%;display: block;" type="text">`;
					const elem = document.getElementById("add-item-last-btn");
					const newElement = document.createElement("div");
					newElement.id = 'new-item-container'
					newElement.innerHTML = htmlText;
					elem.parentNode.insertBefore(newElement, elem);
					document.getElementById("arrayItemNamePointer").value = arrayItemNamePointer;
				} else if (select.value === "Textarea") {
					const htmlText = `
					<label class="mb-3" for="elementName">ITEM CONTENT:</label>
					<textarea id="array-item-textarea" style="width: 100%;display: block;" rows="8" cols="50"  name="itemValue" type="text"></textarea>`;
					const elem = document.getElementById("add-item-last-btn");
					const newElement = document.createElement("div");
					newElement.id = 'new-item-container'
					newElement.innerHTML = htmlText;
					elem.parentNode.insertBefore(newElement, elem);
					document.getElementById("arrayItemNamePointer").value = arrayItemNamePointer;
					CKEDITOR.replace(document.getElementById("array-item-textarea"), {
						on: {
							instanceReady: function (evt) {
								// Store the textarea name along with the CKEditor instance
								evt.editor.textareaName = "itemValue";
							}
						}
					});
				} else if (select.value === "JSON") {
					const htmlText = `
					<label class="mb-3" for="elementName">JSON DATA:</label>
					<textarea id="array-item-textarea" style="width: 100%;display: block;" rows="8" cols="50" type="text" name="itemValue"></textarea>`;
					const elem = document.getElementById("add-item-last-btn");
					const newElement = document.createElement("div");
					newElement.id = 'new-item-container'
					newElement.innerHTML = htmlText;
					elem.parentNode.insertBefore(newElement, elem);
					// var jsonInput = CodeMirror.fromTextArea(document.getElementById("array-item-textarea"), {
					// 	lineNumbers: true,
					// 	mode: "application/json",
					// 	gutters: ["CodeMirror-lint-markers"],
					// 	lint: true,
					// });
					document.getElementById("arrayItemNamePointer").value = arrayItemNamePointer;
				} else if (select.value === "Image") {
					const htmlText = `
					<label class="mb-3" for="elementName">ITEM CONTENT:</label>
					<input name="itemValue" style="width: 100%;display: block;" type="file">`;
					const elem = document.getElementById("add-item-last-btn");
					const newElement = document.createElement("div");
					newElement.id = 'new-item-container';
					newElement.innerHTML = htmlText;
					elem.parentNode.insertBefore(newElement, elem);
					document.getElementById("arrayItemNamePointer").value = arrayItemNamePointer;
				}
			}
		}

	function openItemModal(itemName, sectionName) {
		arrayItemNamePointer = itemName;
		sectionNamePointer = sectionName;
		document.getElementById("arrayItemModal").style.display = "block"
	}

	function closeArrayItemModal() {
		document.getElementById("arrayItemModal").style.display = "none"
	}

	function openNewSectionModal() {
		
		const modal = document.getElementById('sectionModal');
		modal.style.display = 'block';
	}

	function closeSectionModal() {
		
		const modal = document.getElementById('sectionModal');
		modal.style.display = 'none';
	}
	function openButtonModal(buttonTitle,elementArrtName, sectionName, buttonLink) {
		
		document.getElementById("buttonTitle").value = buttonTitle;
		document.getElementById("buttonLink").value = buttonLink;
		buttonNamePointer = elementArrtName;
		sectionNamePointer = sectionName;
		const modal = document.getElementById('buttonModal');
		modal.style.display = 'block';
	}

	function closeButtonModal() {
		
		const modal = document.getElementById('buttonModal');
		modal.style.display = 'none';
	}

	function openLinkModal(elementArrtName, sectionName) {
		
		buttonNamePointer = elementArrtName;
		sectionNamePointer = sectionName;
		const modal = document.getElementById('linkModal');
		modal.style.display = 'block';
	}

	function closeLinkModal() {
		
		const modal = document.getElementById('linkModal');
		modal.style.display = 'none';
	}

	function openNameModal() {
		
		let checkboxes = document.querySelectorAll(".section-choose-checkbox");
		let status = false;
		checkboxes.forEach(item => {
			if(item.checked) status = true
		});

		if(!status){
			return notyf.open({
				type:"info",
				message:"Please choose a section.",
			})
			// can do more stuff here
		}
		if(document.getElementById("elementType").value === "image-uploader"){
			document.getElementById("image-uploader-wr").style.display = "block"
		}  else {
			document.getElementById("image-uploader-wr").style.display = "none"
		}
		const modal = document.getElementById('nameModal');
		modal.style.display = 'block';
	}

	function closeNameModal() {
		
		const modal = document.getElementById('nameModal');
		modal.style.display = 'none';
	}

	function addSection() {
		
		const ejsPageName = document.getElementById("ejspageName").textContent;
		const sectionName = document.getElementById("sectionName").value;
		fetch("/api/v1/manage/add-section", {
			method:"POST",
			headers:{
				"Content-Type":"application/json"
			},
			body:JSON.stringify({ejsPageName, sectionName})
		}).then(res => res.json()).then(data => {
			if(data.success){
				window.location.reload();
			} else {
				notyf.open({
					type:"info",
					message:data.message
				})
			}
		})

		closeSectionModal();
	}

	function addButtonData() {
		
		const ejsPageName = document.getElementById("ejspageName").textContent;
		const sectionName = document.getElementById("sectionName").value;
		const buttonTitle = document.getElementById("buttonTitle").value;
		const buttonLink = document.getElementById("buttonLink").value;
		fetch("/api/v1/manage/save-page-data/add-button", {
			method:"POST",
			headers:{
				"Content-Type":"application/json"
			},
			body:JSON.stringify({ejsPageName, sectionNamePointer, buttonNamePointer, buttonTitle, buttonLink})
		}).then(res => res.json())
		.then((data)=>{
			closeButtonModal();
			window.location.reload();
		})

	}

	function addLinkData() {
		
		const ejsPageName = document.getElementById("ejspageName").textContent;
		const sectionName = document.getElementById("sectionName").value;
		const linkTitle = document.getElementById("linkTitle").value;
		const linkHref = document.getElementById("linkHref").value;
		fetch("/api/v1/manage/save-page-data/add-link", {
			method:"POST",
			headers:{
				"Content-Type":"application/json"
			},
			body:JSON.stringify({ejsPageName, sectionNamePointer, buttonNamePointer, linkTitle, linkHref})
		}).then(res => res.json())
		.then((data)=>{
			closeLinkModal();
			window.location.reload();
		})
	}

	function hanldeRemoveSection(sectionName) {
		
		const ejsPageName = document.getElementById("ejspageName").textContent;
		Swal.fire({
			title: 'Do you want to remove this section?',
			showDenyButton: true,
			showCancelButton: false,
			confirmButtonText: 'Remove Section',
			denyButtonText: 'Cancel',
			customClass: {
				actions: 'my-actions',
				cancelButton: 'order-1 right-gap',
				confirmButton: 'order-2',
			},
		}).then((result) => {
			if (result.isConfirmed) {
				fetch("/api/v1/manage/remove-page-section", {
					method:"POST",
					headers:{
						"Content-Type":"application/json"
					},
					body:JSON.stringify({ejsPageName,sectionName, elementAttrName})
				}).then(()=>{
					window.location.reload();
				})
			} else if (result.isDenied) {
				Swal.fire('Changes are not saved', '', 'info')
			}
		})
	}

	function handleElementDelete(sectionName, elementAttrName) {
		
		const ejsPageName = document.getElementById("ejspageName").textContent;
		Swal.fire({
			title: 'Do you want to delete this element?',
			showDenyButton: true,
			showCancelButton: false,
			confirmButtonText: 'Delete Element',
			denyButtonText: 'Cancel',
			customClass: {
				actions: 'my-actions',
				cancelButton: 'order-1 right-gap',
				confirmButton: 'order-2',
			},
		}).then((result) => {
			if (result.isConfirmed) {
				fetch("/api/v1/manage/remove-section-element", {
					method:"POST",
					headers:{
						"Content-Type":"application/json"
					},
					body:JSON.stringify({ejsPageName,sectionName, elementAttrName})
				}).then(()=>{
					window.location.reload();
				})
			} else if (result.isDenied) {
				Swal.fire('Changes are not saved', '', 'info')
			}
		})
	}

	function addElement() {
		
		const ejsPageName = document.getElementById("ejspageName").textContent;
		const elementType = document.getElementById('elementType').value;
		const elementName = document.getElementById('elementName').value;
		const elementAttrName = document.getElementById("elementAttrName").value;
		const checked = document.querySelectorAll(".section-choose-checkbox");
		let elementObject = undefined;
		let sectionName = undefined;
		checked.forEach(checkItem => {
			if(checkItem.checked){
				var parentDiv = checkItem.parentNode.parentNode.parentNode;
				sectionName = parentDiv.querySelector("div h5").textContent;
				//check for duplicates
				// if(data.success){
					const inputFieldsContainer = parentDiv.querySelector('.inputFieldsContainer');
					if (elementType === 'input') {
						elementObject = {
							elementName:"input",
							elementClass:"form-control",
							elementLabelName:elementName,
							elementAttrName:elementAttrName,
							elementAttrId:"",
							elementAttrType:"text",
							elementAttrFor:"",
							elementValue:"",
						}
					} else if (elementType === 'array') {
						
						elementObject = {
							elementName:"array",
							elementClass:"",
							elementLabelName:elementName,
							elementAttrName:elementAttrName,
							elementAttrId:"",
							elementAttrType:"array",
							elementAttrFor:"",
							elementValue:"",
							elementItems:[],
						}
					} else if (elementType === 'ckeditor') {
						elementObject = {
							elementName:"textarea",
							elementLabelName:elementName,
							elementAttrName:elementAttrName,
							elementAttrId:elementAttrName+"-editor-gen",
							elementAttrType:"text",
							elementAttrFor:elementAttrName+"-editor-gen",
							elementValue:"",
							elementAttrIsEditor:true
						}
					} else if (elementType === 'button') {
						elementObject = {
							elementName:"input-button",
							elementClass:"form-control",
							elementLabelName:elementName,
							elementAttrName:elementAttrName,
							elementAttrHref:"",
							elementAttrId:"",
							elementAttrType:"text",
							elementAttrFor:"",
							elementValue:"",
						}
					} else if (elementType === 'link') {
						elementObject = {
							elementName:"input-link",
							elementClass:"form-control",
							elementLabelName:elementName,
							elementAttrName:elementAttrName,
							elementAttrHref:"",
							elementAttrId:"",
							elementAttrType:"text",
							elementAttrFor:"",
							elementValue:"",
						}
					} else if (elementType === 'image-uploader') {
						elementObject = {
							elementName:"input",
							elementClass:"form-control",
							elementLabelName:elementName,
							elementAttrName:elementAttrName,
							elementAttrId:"",
							elementAttrType:"file",
							elementAttrFor:"",
							elementValue:"",
						}
					}
					if(elementObject && sectionName){
						
						fetch("/api/v1/manage/add-element", {
							method:"POST",
							headers:{
								"Content-Type":"application/json"
							},
							body: JSON.stringify({ejsPageName, sectionName, elementData:elementObject})
						}).then(res => res.json()).then(data => {
							window.location.reload();
						})
					}
				// } else {
				// 	notyf.open({
				// 		type:"info",
				// 		message:data.message
				// 	})
				// }
			}
			
		})
		closeNameModal();
	}

	function addInputField() {
		openNameModal();
	}

	async function submitFields() {
		
		const ejsPageName = document.getElementById("ejspageName").textContent;
		const pageDefaultTitle = document.getElementById("default-page-title").value;
		const pageDefaultContent = CKEDITOR.instances["default-page-content"].getData();
		const data = { ejsPageName, pageDefaultTitle, pageDefaultContent, sections: []};
		const formData = new FormData();
		formData.append("ejsPageName", ejsPageName);
		formData.append("pageDefaultTitle", pageDefaultTitle);
		formData.append("pageDefaultContent", pageDefaultContent);
		const sections = document.querySelectorAll('.section-wr');
		sections.forEach(section => {
			let sectionContent = [];
			let sectionNameInput = section.querySelector('input[name="section-name"]');
			const allInputs = section.querySelectorAll('input:not([name="section-name"]):not([type="file"]):not(.link-input)');
			allInputs.forEach(inputItem => {
				sectionContent.push({
					elementName:"input",
					elementAttrName:inputItem.getAttribute('name'),
					elementValue:inputItem.value,
				})
			})
			const allTextAreas = section.querySelectorAll('textarea');
			for (var instanceName in CKEDITOR.instances) {
				if (CKEDITOR.instances.hasOwnProperty(instanceName)) {
					var editor = CKEDITOR.instances[instanceName];
					var editorContent = editor.getData();
					sectionContent.push({
						elementName:"textarea",
						elementAttrName:editor.textareaName,
						elementValue:editorContent,
					})
				}
			}
			const allFiles = section.querySelectorAll('input[type="file"]');
			allFiles.forEach(fileInput => {
				if (fileInput.files.length > 0) {
					formData.append('files', fileInput.files[0]);
					sectionContent.push({
						elementName:"input",
						elementAttrName:fileInput.getAttribute('name'),
						elementAttrSrcImg:fileInput.files[0].name,
						elementAttrAltImg:"Conative IT Solutions"
					})
				}
			})
			const allLinks = section.querySelectorAll(".link-input");
			allLinks.forEach(link => {
				sectionContent.push({
					elementName:"input-link",
					elementAttrName:link.getAttribute('name'),
					elementValue:link.value,
				})
			})
			// for text area also
			data.sections.push({
				sectionName: sectionNameInput.value,
				sectionContent
			})
		})
		formData.append("sections", JSON.stringify(data.sections))
		fetch("/api/v1/manage/save-page-data", {
			method:"POST",
			body:formData
		})
		.then(()=>{ window.location.reload() }).catch(err => console.log(err))
	}
</script>
